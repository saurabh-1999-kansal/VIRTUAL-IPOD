{"version":3,"sources":["Screen.js","Ipod.js","App.js","firebase.js","index.js"],"names":["Screen","this","props","Page","changeTheScreen","Heading","list","isHalf","img","cnt","id","data","length","map","item","onClick","className","src","alt","height","width","React","Component","Ipod","page1","state","pages","filter","page","setState","Active","clicking","document","getElementsByClassName","undefined","getAttribute","backClicking","back","Date","toLocaleTimeString","target","getElementById","region","ZingTouch","Region","lastTime","LastTimeAngle","bind","e","angle","detail","distanceFromOrigin","len","classList","remove","num","outputStr","i","console","log","setOutput","Math","floor","distanceFromLast","setInterval","currentTime","draggable","App","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render"],"mappings":"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","file":"static/js/main.42a3bb54.chunk.js","sourcesContent":["import React from \"react\";\r\n// this is the screen component to diplay the required page\r\nclass Screen extends React.Component {\r\n  render() {\r\n    // these were passed in props when the screen component was included inside the ipod\r\n    const { Page, changeTheScreen } = this.props;\r\n    // object destructing\r\n    const { Heading, list, isHalf, img } = Page;\r\n    // this is the cnt of id's of the buttons and these id's are given dynamically in sequence so that the active button\r\n    // can be changed easily\r\n    var cnt = -1;\r\n    return (\r\n      <div id=\"screen\" key={Page.id}>\r\n        {/* there are actually two types of pages ,first in which we have the half creens of the ipod with the list of\r\n        buttons and the other half with the image and second in whih the whole screen has the image only */}\r\n        {/* isHalf conatins whether the screen is of halfscreen type or full scree type */}\r\n        {/* this is the jsx for the half tyope screen */}\r\n        {isHalf && (\r\n          // this is the half type screen\r\n          <div id=\"halfScreen\">\r\n            {/* this is the heading of the half type screen */}\r\n            <div id=\"halfheading\">\r\n              <strong>{Heading}</strong>\r\n            </div>\r\n            {/* this is the conatiner of the list as well as the image in a half type screen */}\r\n            <div id=\"list-image-container\">\r\n              {/* this is the conatiner of the list of buttons and also data attribute has the length of the list of the buttons\r\n              so that our code is more general */}\r\n              <div id=\"list\" data={list.length}>\r\n                {/* this is the map functionof the javascript array so that we can traverse the whole list of buttons\r\n                to make the corresponding jsx as required */}\r\n                {list.map((item) => {\r\n                  // made count++ everytime so that id's are guived dynamically to all the buttons of the list\r\n                  cnt++;\r\n\r\n                  return (\r\n                    <div id=\"button-container\" key={item + \"\"}>\r\n                      <button\r\n                        // id given dynamically\r\n                        id={cnt + \"\"}\r\n                        // onclick eventlistener applied so that the ipod becomes touch screen ,so that it judges the clicking\r\n                        // on the buttons as well as on the ok button inside the wheel\r\n                        onClick={() => {\r\n                          changeTheScreen(item);\r\n                        }}\r\n                        // default class name of active is given to the 0th item bevause if there is a list then it will atleast\r\n                        // have the first item of the list,else it will be of the full image type screen\r\n                        className={cnt === 0 ? \"Active\" : \"\"}\r\n                        // heading of the screen specified inside the data attribute so that it can be used in the fucntions respectively\r\n                        data={item + \"\"}\r\n                      >\r\n                        {/* name of the button is also given dynamically according to the list item(or the page heading) */}\r\n                        {item}\r\n                      </button>\r\n                      <br />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              {/* this is the image of the half typpe screen */}\r\n              <div id=\"halfimg\">\r\n                <img src={img} alt=\"display\" height=\"100%\" width=\"100%\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* here the jsx of the fullscreen with image type screen starts */}\r\n        {!isHalf && (\r\n          // this is the whole full tyoe screen\r\n          <div id=\"fullScreen\">{\r\n            \r\n          }\r\n            {/* this div of list is just added so that when the user is on the half type screen he must not see the error as\r\n            if the compiler will not be able to apply the event hndler to a list as it is in the full type screen and correspondingly\r\n            give the error of cannot read the className types */}\r\n            {/* actully in its css its display property is made none so that it must not be visible to the user even if it exsists\r\n            it is just a list so that when the user rotates the wheel the active class wil keep on removing and adding on\r\n            these buttons only */}\r\n            {/* also in its data heading is sent so that even when the user tries to click on the inner circle he/she wil be \r\n            directed back to this page only and user will think that the clicking is not working on halftype screen  */}\r\n            <div id=\"list\" data={4}>\r\n              <button id=\"0\" className=\"Active\" data={Heading}></button>\r\n              <button id=\"1\" className=\"Active\" data={Heading}></button>\r\n              <button id=\"2\" className=\"Active\" data={Heading}></button>\r\n              <button id=\"3\" className=\"Active\" data={Heading}></button>\r\n            </div>\r\n            {/* it is the heading of the full type screen */}\r\n            <div id=\"fullHeading\">\r\n              <strong>{Heading}</strong>\r\n            </div>\r\n            {/* it is the required image of the full type screen */}\r\n            <div id=\"fullImg\">\r\n              {/* this is the image */}\r\n              <img src={img} alt=\"display\" height=\"100%\" width=\"100%\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Screen;","import React from \"react\";\r\nimport Screen from \"./Screen\";\r\nimport ZingTouch from \"zingtouch\";\r\n// import firebase from \"firebase/app\";\r\n// import \"firebase/firestore\";\r\n//this the component which has the required screen component as well as the buttons which are below the screen\r\nclass Ipod extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      //these are the required pages which will come on the screen respectively ,all in one array\r\n      pages: [],\r\n      // here i have explained on page and in similar way we can understand the data of other pages respectively\r\n       pages:[{\r\n          //this is the heading of a particular page\r\n          Heading: \"IPOD\",\r\n          //it is the list of buttons in that page\r\n          list: [\"Music\", \"Settings\", \"Games\", \"Apps\"],\r\n          //this is for whether it is a page in which half the screen is with image and half with options or only an image\r\n          isHalf: true,\r\n          //this is the required image in a page(irrespective of whether half or full)\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjvxtbA68xdAqondYCwOzjbYiQX6lLcU5pVQ&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Music\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRUmlodnrWBtGSpRHuKltQrzumJilN_Shqonw&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Settings\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSaZieuWRl-TqN9Je5GJDFOJqcsToHi83AovQ&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Games\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOxbHt9yPDBypozZuV26VA40X7B9cpQaDSCg&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Apps\",\r\n          list: [\"Facebook\", \"Whatsapp\", \"Snapchat\", \"Gmeet\"],\r\n          isHalf: true,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSWOa1byQIa6_iwSzAL3jreSh1ssYPSI0hoOg&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Facebook\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSeje5u8ZW_PriaW8fk8j_qZoxUW4nS2lXMiw&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n        {\r\n          Heading: \"Whatsapp\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQjEp4QCJTNi94110rqbRfteoG5OSw03JhXuQ&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n        {\r\n          Heading: \"Snapchat\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS7dHUw3wIGznZSdiRloSTr-LpFykfRgVn-8Q&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n        {\r\n          Heading: \"Gmeet\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTCYa4TKVHQnA31cxCguK8qLSxLWrNfcp-zog&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n      ],\r\n      // // pages was the data of all the pages\r\n      // // but this Active is the  page which is  currently active on the screen\r\n      // // by default i have provided the Ipod page\r\n      Active: {\r\n        Heading: \"IPOD\",\r\n        list: [\"Music\", \"Settings\", \"Games\", \"Apps\"],\r\n        isHalf: true,\r\n        img:\r\n          \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjvxtbA68xdAqondYCwOzjbYiQX6lLcU5pVQ&usqp=CAU\",\r\n        id: \"100\",\r\n        back: \"IPOD\",\r\n      },\r\n      // this is the time visible on the top left corner and defined in state so that re rendering takes place when the\r\n      // state changes\r\n      currentTime: new Date().toLocaleTimeString(),\r\n    };\r\n  }\r\n  //this is the function to change the screen according to what is clicked by the user\r\n  changeTheScreen = (item) => {\r\n    //here we get the heading of the page to be opened in (item)\r\n\r\n    const { pages } = this.state;\r\n    //this is to take out the page which the user requires to come on the screen\r\n    //from the data in the araray of pages\r\n    let page1 = pages.filter((page) => page.Heading === item);\r\n    //this to set the state so that rerendring takes place and the page requested by the user goes inside the Active option\r\n    //and so it comes on the screen respectively\r\n\r\n    this.setState({\r\n      Active: page1[0],\r\n    });\r\n  };\r\n\r\n  //this is the function for the clicking event that will occur in the button inside that rotating wheel\r\n  //so that the page coresponding to the active button shall open up\r\n  clicking = () => {\r\n    //this is to take out which button is active\r\n    // console.log(document.getElementsByClassName(\"Active\"));\r\n    let item = document.getElementsByClassName(\"Active\")[0];\r\n    //if it comes out to be undefined it means there is no list in the screen and we are inside the page\r\n    //in which we have only a image on the whole screen\r\n\r\n    if (item !== undefined) {\r\n      //In jsx ,i have provided the corresponding heading in a data attribute\r\n      item = item.getAttribute(\"data\");\r\n      // console.log(item);\r\n      //used the function defined above to make the necessary changes\r\n      this.changeTheScreen(item);\r\n    }\r\n  };\r\n  // this function is for the backcliking to go one page back\r\n  backClicking = () => {\r\n    // just taken the Active element from the state and changed the screen accordingly by function defined above\r\n    const { Active } = this.state;\r\n    this.changeTheScreen(Active.back);\r\n  };\r\n  // it is componentDidMount funtion with required event listenersfrom zingtouch,also data fetching from the firebase is\r\n  // in it so that the app has the data form starting\r\n  componentDidMount() {\r\n    // this  is to take read data from firebase\r\n    // pages is a collection made in FB\r\n    \r\n    \r\n    \r\n    // firebase\r\n    //   .firestore()\r\n    //   .collection(\"pages\")\r\n    //   .get()\r\n    //   .then((snapshot) => {\r\n    //     const pages = snapshot.docs.map((doc) => {\r\n    //       const data = doc.data();\r\n    //       // id is also specified so that it may be required in future\r\n    //       data[\"id\"] = doc.id;\r\n    //       return data;\r\n    //     });\r\n    //     // state is set at starting only\r\n    //     this.setState({\r\n    //       pages,\r\n    //     });\r\n    //   });\r\n\r\n    // var currentAngle = 0;\r\n    //Using a layer on top of the entire page for \"fat-finger\" detection on mobile devices.\r\n    //first of all i have taken the target element from DOM and made a new zingtouch region\r\n    var target = document.getElementById(\"outerCircle\");\r\n    var region = new ZingTouch.Region(target);\r\n    //lastTime indicates the id of previously active button\r\n    let lastTime = 0;\r\n    //LastTimeAngle denotes that when we last time changed the active button (at which angle)\r\n    var LastTimeAngle = 0;\r\n\r\n    //now we have bound the zingtouch region with the rotate gesture\r\n    region.bind(target, \"rotate\", function (e) {\r\n      //in e we get the required events that are captured\r\n      // currentAngle += e.detail.distanceFromLast;\r\n\r\n      let angle = e.detail.distanceFromOrigin;\r\n      //this is made so that after every rotate of 15 degrees the active button must be changed\r\n      //lesser and greater are according to whether the user rotates in the clockwise or anticlockwise direction.\r\n      if (angle - LastTimeAngle > 15) {\r\n        //here len is the length of the list of the buttons n a particular screen,in jsx its size is defined in an attribute\r\n        //data so that we get a more general code in which the number of buttons on a screen can be different\r\n        let len = document.getElementById(\"list\").getAttribute(\"data\");\r\n        //here I have removed the active class from the button which was active before\r\n        \r\n        document.getElementById(lastTime + \"\").classList.remove(\"Active\");\r\n        //here I have added the active class to the next button\r\n        // all the expressions are written without the addition sign so that there is no problem in javascript\r\n        document.getElementById(\"\" + ((lastTime - (1 - 2)) % len)).className =\r\n          \"Active\";\r\n       \r\n        //here the last time has been changed for future as well as LastTimeAngle\r\n        lastTime = (lastTime - (1 - 2)) % len;\r\n        LastTimeAngle = angle;\r\n      } else if (angle - LastTimeAngle < -15) {\r\n        //similarly the else case is also made\r\n        let len = document.getElementById(\"list\").getAttribute(\"data\");\r\n\r\n        const num = len;\r\n      \r\n        document.getElementById(lastTime + \"\").classList.remove(\"Active\");\r\n        \r\n        document.getElementById(\r\n          \"\" +\r\n            ((((lastTime - 1 - (num - (2 * num))) % num) - (num - (2 * num))) % num)\r\n        ).className = \"Active\";\r\n\r\n        lastTime =\r\n          (((lastTime - 1 - (num - (2 * num))) % num) - (num - (2 * num))) % num;\r\n          \r\n        LastTimeAngle = angle;\r\n      }\r\n      //this is a call to setoutput function which will make the string from the data collected from the event\r\n      //and print it on the console respectively\r\n      setOutput([\r\n        [\"Gesture\", \"Rotate\"],\r\n        [\"angle\", Math.floor(e.detail.angle) + \"°\"],\r\n        [\"distanceFromOrigin\", Math.floor(e.detail.distanceFromOrigin) + \"°\"],\r\n        [\"distanceFromLast\", Math.floor(e.detail.distanceFromLast) + \"°\"],\r\n      ]);\r\n    });\r\n    //funciton to print on console the events as made by muse by the user\r\n    function setOutput(data) {\r\n      var outputStr = \"> \";\r\n      for (var i = 0; i < data.length; i++) {\r\n        outputStr +=\r\n          data[i][0] + \": \" + data[i][1] + (i === data.length - 1 ? \"\" : \" , \");\r\n      }\r\n\r\n      console.log(outputStr);\r\n    }\r\n    // this function is used so that the time at the top left corener changes after every one second\r\n    setInterval(() => {\r\n      // state is changed after every one second so that re render takes place and date get refreshed everytime\r\n      this.setState({\r\n        // it is a function to take out the time\r\n        currentTime: new Date().toLocaleTimeString(),\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      //this is the outer div inside which my Ipod wil come(like body)\r\n      <div id=\"main\">\r\n        {/* this is the required Ipod to be formed */}\r\n        <div id=\"ipod\">\r\n          {/* this div has the icons visible on the top of the IPAD */}\r\n          <div id=\"icons\">\r\n            {/* it has the time and it is taken from the state so that time changes after every re render */}\r\n            <div id=\"clock\">{this.state.currentTime}</div>\r\n            {/* this div has the required icons on the top right corner */}\r\n            <div id=\"right-side-icons\">\r\n              {/* here we have those icons in their respective divs */}\r\n              <div>\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/png/128/1436/1436397.png\"\r\n                  alt=\"signals\"\r\n                ></img>\r\n              </div>\r\n              <div>\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/png/128/254/254613.png\"\r\n                  alt=\"wifiIcon\"\r\n                ></img>\r\n              </div>\r\n              <div>\r\n                <img\r\n                  src=\"https://www.flaticon.com/svg/static/icons/svg/566/566236.svg\"\r\n                  alt=\"blutoothIcon\"\r\n                ></img>\r\n              </div>\r\n\r\n              <div>\r\n                <img\r\n                  src=\"https://www.flaticon.com/premium-icon/icons/svg/2200/2200004.svg\"\r\n                  alt=\"BatteryIcon\"\r\n                ></img>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* this is the screen component */}\r\n          <Screen\r\n            //this is the page data which has to be displyed on the screen is passed as props to the screen component\r\n            Page={this.state.Active}\r\n            //this is the function to change the screen so that  the child component can raise an event to change\r\n            //screen as required\r\n            changeTheScreen={this.changeTheScreen}\r\n          />\r\n          <br />\r\n          {/* this is the buttons container(outerRectangle) */}\r\n          <div id=\"outerRectangle\">\r\n            {/* this is the outer circle of the ring where rotating event need to be catched */}\r\n            <div id=\"outerCircle\">\r\n              {/* this is the menu button so that user can go directly to the menu when required */}\r\n              <div id=\"menu\">\r\n                <button\r\n                  onClick={() => {\r\n                    //raised an event to change the screen page to Ipod as user want's to go back to menu\r\n                    this.changeTheScreen(\"IPOD\");\r\n                  }}\r\n                >\r\n                  MENU\r\n                </button>\r\n              </div>\r\n              {/* these are the required flaticons */}\r\n              <div id=\"leftArrow\">\r\n                <img\r\n                  src=\"https://www.flaticon.com/svg/static/icons/svg/854/854183.svg\"\r\n                  alt=\"left-arrow\"\r\n                  draggable=\"false\"\r\n                />\r\n              </div>\r\n              <div id=\"rightArrow\">\r\n                <img\r\n                  src=\"https://www.flaticon.com/svg/static/icons/svg/854/854184.svg\"\r\n                  alt=\"right-arrow\"\r\n                  draggable=\"false\"\r\n                />\r\n              </div>\r\n              <div id=\"back\">\r\n                <button\r\n                  onClick={() => {\r\n                    this.backClicking();\r\n                  }}\r\n                >\r\n                  {\"<<\"}\r\n                </button>\r\n              </div>\r\n              {/* this is the innner circle of the ring in which ,if clicked will take us to the the screen corresponding to */}\r\n              {/* the button that is currently active */}\r\n              <button\r\n                id=\"innerCircle\"\r\n                onClick={() => {\r\n                  this.clicking();\r\n                }}\r\n              ></button>\r\n            </div>\r\n          </div>\r\n          <br />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Ipod;","import Ipod from \"./Ipod\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ipod />\n    </div>\n  );\n}\n\nexport default App;\n","import firebase from \"firebase/app\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCkbplbZcrlRkmx0SC8zTu0yu7GcrdrRpE\",\r\n    authDomain: \"ipod-1b4ea.firebaseapp.com\",\r\n    projectId: \"ipod-1b4ea\",\r\n    storageBucket: \"ipod-1b4ea.appspot.com\",\r\n    messagingSenderId: \"1010637550540\",\r\n    appId: \"1:1010637550540:web:ca64b682507e6990ede369\",\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  export default firebase;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nimport firebaseConfig from \"./firebase\";\n// this is the firebase config which we get when we make a database for our app\n// also firebase is preferred because it is a real time data base so that if the state is changed heavily in future\n// then those can be done directly in the database and correspondingly everywhere,where the app in open refreshing takes\n// place automatically when we define the listener in are app namely onSnapshot\n\n\n//here we added the app component inside the div with id root\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}