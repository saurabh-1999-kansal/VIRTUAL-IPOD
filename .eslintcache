[{"C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\index.js":"1","C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\App.js":"2","C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\Ipod.js":"3","C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\Screen.js":"4","C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\firebase.js":"5"},{"size":671,"mtime":1629640478883,"results":"6","hashOfConfig":"7"},{"size":135,"mtime":1629136838765,"results":"8","hashOfConfig":"7"},{"size":14430,"mtime":1629136716072,"results":"9","hashOfConfig":"7"},{"size":5492,"mtime":1629136777208,"results":"10","hashOfConfig":"7"},{"size":443,"mtime":1629640483490,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"776ti",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\index.js",["26"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nimport firebaseConfig from \"./firebase\";\n// this is the firebase config which we get when we make a database for our app\n// also firebase is preferred because it is a real time data base so that if the state is changed heavily in future\n// then those can be done directly in the database and correspondingly everywhere,where the app in open refreshing takes\n// place automatically when we define the listener in are app namely onSnapshot\n\n\n//here we added the app component inside the div with id root\nReactDOM.render(<App />, document.getElementById(\"root\"));\n",["27","28"],"C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\App.js",[],"C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\Ipod.js",["29"],"import React from \"react\";\r\nimport Screen from \"./Screen\";\r\nimport ZingTouch from \"zingtouch\";\r\n// import firebase from \"firebase/app\";\r\n// import \"firebase/firestore\";\r\n//this the component which has the required screen component as well as the buttons which are below the screen\r\nclass Ipod extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      //these are the required pages which will come on the screen respectively ,all in one array\r\n      pages: [],\r\n      // here i have explained on page and in similar way we can understand the data of other pages respectively\r\n       pages:[{\r\n          //this is the heading of a particular page\r\n          Heading: \"IPOD\",\r\n          //it is the list of buttons in that page\r\n          list: [\"Music\", \"Settings\", \"Games\", \"Apps\"],\r\n          //this is for whether it is a page in which half the screen is with image and half with options or only an image\r\n          isHalf: true,\r\n          //this is the required image in a page(irrespective of whether half or full)\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjvxtbA68xdAqondYCwOzjbYiQX6lLcU5pVQ&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Music\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRUmlodnrWBtGSpRHuKltQrzumJilN_Shqonw&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Settings\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSaZieuWRl-TqN9Je5GJDFOJqcsToHi83AovQ&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Games\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOxbHt9yPDBypozZuV26VA40X7B9cpQaDSCg&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Apps\",\r\n          list: [\"Facebook\", \"Whatsapp\", \"Snapchat\", \"Gmeet\"],\r\n          isHalf: true,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSWOa1byQIa6_iwSzAL3jreSh1ssYPSI0hoOg&usqp=CAU\",\r\n          back: \"IPOD\",\r\n        },\r\n        {\r\n          Heading: \"Facebook\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSeje5u8ZW_PriaW8fk8j_qZoxUW4nS2lXMiw&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n        {\r\n          Heading: \"Whatsapp\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQjEp4QCJTNi94110rqbRfteoG5OSw03JhXuQ&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n        {\r\n          Heading: \"Snapchat\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS7dHUw3wIGznZSdiRloSTr-LpFykfRgVn-8Q&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n        {\r\n          Heading: \"Gmeet\",\r\n          list: [],\r\n          isHalf: false,\r\n          img:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTCYa4TKVHQnA31cxCguK8qLSxLWrNfcp-zog&usqp=CAU\",\r\n          back: \"Apps\",\r\n        },\r\n      ],\r\n      // // pages was the data of all the pages\r\n      // // but this Active is the  page which is  currently active on the screen\r\n      // // by default i have provided the Ipod page\r\n      Active: {\r\n        Heading: \"IPOD\",\r\n        list: [\"Music\", \"Settings\", \"Games\", \"Apps\"],\r\n        isHalf: true,\r\n        img:\r\n          \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjvxtbA68xdAqondYCwOzjbYiQX6lLcU5pVQ&usqp=CAU\",\r\n        id: \"100\",\r\n        back: \"IPOD\",\r\n      },\r\n      // this is the time visible on the top left corner and defined in state so that re rendering takes place when the\r\n      // state changes\r\n      currentTime: new Date().toLocaleTimeString(),\r\n    };\r\n  }\r\n  //this is the function to change the screen according to what is clicked by the user\r\n  changeTheScreen = (item) => {\r\n    //here we get the heading of the page to be opened in (item)\r\n\r\n    const { pages } = this.state;\r\n    //this is to take out the page which the user requires to come on the screen\r\n    //from the data in the araray of pages\r\n    let page1 = pages.filter((page) => page.Heading === item);\r\n    //this to set the state so that rerendring takes place and the page requested by the user goes inside the Active option\r\n    //and so it comes on the screen respectively\r\n\r\n    this.setState({\r\n      Active: page1[0],\r\n    });\r\n  };\r\n\r\n  //this is the function for the clicking event that will occur in the button inside that rotating wheel\r\n  //so that the page coresponding to the active button shall open up\r\n  clicking = () => {\r\n    //this is to take out which button is active\r\n    // console.log(document.getElementsByClassName(\"Active\"));\r\n    let item = document.getElementsByClassName(\"Active\")[0];\r\n    //if it comes out to be undefined it means there is no list in the screen and we are inside the page\r\n    //in which we have only a image on the whole screen\r\n\r\n    if (item !== undefined) {\r\n      //In jsx ,i have provided the corresponding heading in a data attribute\r\n      item = item.getAttribute(\"data\");\r\n      // console.log(item);\r\n      //used the function defined above to make the necessary changes\r\n      this.changeTheScreen(item);\r\n    }\r\n  };\r\n  // this function is for the backcliking to go one page back\r\n  backClicking = () => {\r\n    // just taken the Active element from the state and changed the screen accordingly by function defined above\r\n    const { Active } = this.state;\r\n    this.changeTheScreen(Active.back);\r\n  };\r\n  // it is componentDidMount funtion with required event listenersfrom zingtouch,also data fetching from the firebase is\r\n  // in it so that the app has the data form starting\r\n  componentDidMount() {\r\n    // this  is to take read data from firebase\r\n    // pages is a collection made in FB\r\n    \r\n    \r\n    \r\n    // firebase\r\n    //   .firestore()\r\n    //   .collection(\"pages\")\r\n    //   .get()\r\n    //   .then((snapshot) => {\r\n    //     const pages = snapshot.docs.map((doc) => {\r\n    //       const data = doc.data();\r\n    //       // id is also specified so that it may be required in future\r\n    //       data[\"id\"] = doc.id;\r\n    //       return data;\r\n    //     });\r\n    //     // state is set at starting only\r\n    //     this.setState({\r\n    //       pages,\r\n    //     });\r\n    //   });\r\n\r\n    // var currentAngle = 0;\r\n    //Using a layer on top of the entire page for \"fat-finger\" detection on mobile devices.\r\n    //first of all i have taken the target element from DOM and made a new zingtouch region\r\n    var target = document.getElementById(\"outerCircle\");\r\n    var region = new ZingTouch.Region(target);\r\n    //lastTime indicates the id of previously active button\r\n    let lastTime = 0;\r\n    //LastTimeAngle denotes that when we last time changed the active button (at which angle)\r\n    var LastTimeAngle = 0;\r\n\r\n    //now we have bound the zingtouch region with the rotate gesture\r\n    region.bind(target, \"rotate\", function (e) {\r\n      //in e we get the required events that are captured\r\n      // currentAngle += e.detail.distanceFromLast;\r\n\r\n      let angle = e.detail.distanceFromOrigin;\r\n      //this is made so that after every rotate of 15 degrees the active button must be changed\r\n      //lesser and greater are according to whether the user rotates in the clockwise or anticlockwise direction.\r\n      if (angle - LastTimeAngle > 15) {\r\n        //here len is the length of the list of the buttons n a particular screen,in jsx its size is defined in an attribute\r\n        //data so that we get a more general code in which the number of buttons on a screen can be different\r\n        let len = document.getElementById(\"list\").getAttribute(\"data\");\r\n        //here I have removed the active class from the button which was active before\r\n        \r\n        document.getElementById(lastTime + \"\").classList.remove(\"Active\");\r\n        //here I have added the active class to the next button\r\n        // all the expressions are written without the addition sign so that there is no problem in javascript\r\n        document.getElementById(\"\" + ((lastTime - (1 - 2)) % len)).className =\r\n          \"Active\";\r\n       \r\n        //here the last time has been changed for future as well as LastTimeAngle\r\n        lastTime = (lastTime - (1 - 2)) % len;\r\n        LastTimeAngle = angle;\r\n      } else if (angle - LastTimeAngle < -15) {\r\n        //similarly the else case is also made\r\n        let len = document.getElementById(\"list\").getAttribute(\"data\");\r\n\r\n        const num = len;\r\n      \r\n        document.getElementById(lastTime + \"\").classList.remove(\"Active\");\r\n        \r\n        document.getElementById(\r\n          \"\" +\r\n            ((((lastTime - 1 - (num - (2 * num))) % num) - (num - (2 * num))) % num)\r\n        ).className = \"Active\";\r\n\r\n        lastTime =\r\n          (((lastTime - 1 - (num - (2 * num))) % num) - (num - (2 * num))) % num;\r\n          \r\n        LastTimeAngle = angle;\r\n      }\r\n      //this is a call to setoutput function which will make the string from the data collected from the event\r\n      //and print it on the console respectively\r\n      setOutput([\r\n        [\"Gesture\", \"Rotate\"],\r\n        [\"angle\", Math.floor(e.detail.angle) + \"°\"],\r\n        [\"distanceFromOrigin\", Math.floor(e.detail.distanceFromOrigin) + \"°\"],\r\n        [\"distanceFromLast\", Math.floor(e.detail.distanceFromLast) + \"°\"],\r\n      ]);\r\n    });\r\n    //funciton to print on console the events as made by muse by the user\r\n    function setOutput(data) {\r\n      var outputStr = \"> \";\r\n      for (var i = 0; i < data.length; i++) {\r\n        outputStr +=\r\n          data[i][0] + \": \" + data[i][1] + (i === data.length - 1 ? \"\" : \" , \");\r\n      }\r\n\r\n      console.log(outputStr);\r\n    }\r\n    // this function is used so that the time at the top left corener changes after every one second\r\n    setInterval(() => {\r\n      // state is changed after every one second so that re render takes place and date get refreshed everytime\r\n      this.setState({\r\n        // it is a function to take out the time\r\n        currentTime: new Date().toLocaleTimeString(),\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      //this is the outer div inside which my Ipod wil come(like body)\r\n      <div id=\"main\">\r\n        {/* this is the required Ipod to be formed */}\r\n        <div id=\"ipod\">\r\n          {/* this div has the icons visible on the top of the IPAD */}\r\n          <div id=\"icons\">\r\n            {/* it has the time and it is taken from the state so that time changes after every re render */}\r\n            <div id=\"clock\">{this.state.currentTime}</div>\r\n            {/* this div has the required icons on the top right corner */}\r\n            <div id=\"right-side-icons\">\r\n              {/* here we have those icons in their respective divs */}\r\n              <div>\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/png/128/1436/1436397.png\"\r\n                  alt=\"signals\"\r\n                ></img>\r\n              </div>\r\n              <div>\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/png/128/254/254613.png\"\r\n                  alt=\"wifiIcon\"\r\n                ></img>\r\n              </div>\r\n              <div>\r\n                <img\r\n                  src=\"https://www.flaticon.com/svg/static/icons/svg/566/566236.svg\"\r\n                  alt=\"blutoothIcon\"\r\n                ></img>\r\n              </div>\r\n\r\n              <div>\r\n                <img\r\n                  src=\"https://www.flaticon.com/premium-icon/icons/svg/2200/2200004.svg\"\r\n                  alt=\"BatteryIcon\"\r\n                ></img>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* this is the screen component */}\r\n          <Screen\r\n            //this is the page data which has to be displyed on the screen is passed as props to the screen component\r\n            Page={this.state.Active}\r\n            //this is the function to change the screen so that  the child component can raise an event to change\r\n            //screen as required\r\n            changeTheScreen={this.changeTheScreen}\r\n          />\r\n          <br />\r\n          {/* this is the buttons container(outerRectangle) */}\r\n          <div id=\"outerRectangle\">\r\n            {/* this is the outer circle of the ring where rotating event need to be catched */}\r\n            <div id=\"outerCircle\">\r\n              {/* this is the menu button so that user can go directly to the menu when required */}\r\n              <div id=\"menu\">\r\n                <button\r\n                  onClick={() => {\r\n                    //raised an event to change the screen page to Ipod as user want's to go back to menu\r\n                    this.changeTheScreen(\"IPOD\");\r\n                  }}\r\n                >\r\n                  MENU\r\n                </button>\r\n              </div>\r\n              {/* these are the required flaticons */}\r\n              <div id=\"leftArrow\">\r\n                <img\r\n                  src=\"https://www.flaticon.com/svg/static/icons/svg/854/854183.svg\"\r\n                  alt=\"left-arrow\"\r\n                  draggable=\"false\"\r\n                />\r\n              </div>\r\n              <div id=\"rightArrow\">\r\n                <img\r\n                  src=\"https://www.flaticon.com/svg/static/icons/svg/854/854184.svg\"\r\n                  alt=\"right-arrow\"\r\n                  draggable=\"false\"\r\n                />\r\n              </div>\r\n              <div id=\"back\">\r\n                <button\r\n                  onClick={() => {\r\n                    this.backClicking();\r\n                  }}\r\n                >\r\n                  {\"<<\"}\r\n                </button>\r\n              </div>\r\n              {/* this is the innner circle of the ring in which ,if clicked will take us to the the screen corresponding to */}\r\n              {/* the button that is currently active */}\r\n              <button\r\n                id=\"innerCircle\"\r\n                onClick={() => {\r\n                  this.clicking();\r\n                }}\r\n              ></button>\r\n            </div>\r\n          </div>\r\n          <br />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Ipod;","C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\Screen.js",[],["30","31"],"C:\\Users\\lenovo\\Desktop\\myProjects\\IPOD\\src\\firebase.js",[],{"ruleId":"32","severity":1,"message":"33","line":7,"column":8,"nodeType":"34","messageId":"35","endLine":7,"endColumn":22},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":14,"column":8,"nodeType":"42","messageId":"43","endLine":14,"endColumn":13},{"ruleId":"36","replacedBy":"44"},{"ruleId":"38","replacedBy":"45"},"no-unused-vars","'firebaseConfig' is defined but never used.","Identifier","unusedVar","no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-dupe-keys","Duplicate key 'pages'.","ObjectExpression","unexpected",["46"],["47"],"no-global-assign","no-unsafe-negation"]